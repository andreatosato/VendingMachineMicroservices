@page "/machines"
@using VendingMachine.Service.Machines.Read.Models
@using VendingMachine.UI.ViewModels.Machines
@inject LocationService  locationService
@inject IJSRuntime js
@inject IGatewayApiBlazor api


<h3>Machines</h3>

<div class="container">
    <div class="row">
        <div class="col-4">
            Latitude
        </div>
        <div class="col-4">
            Longitude
        </div>
        <div class="col-4">
            Accuracy
        </div>
    </div>
    <div class="row" style="margin-top: 30px">
        <div class="col-4">
            @CurrentPosition.Latitude
        </div>
        <div class="col-4">
            @CurrentPosition.Longitude
        </div>
        <div class="col-4">
            @CurrentPosition.Accuracy metri
        </div>
    </div>
    @*<div class="row">
        <ul>
            @foreach (var item in MachineItems)
            {
            <li>
                <a href="/products/@item.Id">
                    Machine id: @item.Id
                </a>
            </li>
            }
        </ul>
    </div>*@
    <div class="row">
        <div class="col-12">
            <div id="vendingMap" style="width:100%;height:65vh;"></div>
        </div>
    </div>
</div>

@code {

    private Location CurrentPosition = new Location();
    private IEnumerable<NearbyMachineReadModel> MachineItems { get; set; } = new List<NearbyMachineReadModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            CurrentPosition = await locationService.GetLocationAsync();
            MachineItems = await api.GetNearbyMachineItemsAsync(new GeoSearchViewModel
            {
                Latutide = (double)CurrentPosition.Latitude,
                Longitude = (double)CurrentPosition.Longitude,
                Radius = 10_000
            });
            base.StateHasChanged();
        }
        else
        {
            List<MachineMarkerViewModel> machineMarkers = new List<MachineMarkerViewModel>();
            foreach (var m in MachineItems)
            {
                Console.WriteLine($"Machine Razor Page: {m.Position.X} {m.Position.Y} {m.Id.ToString()}");
                machineMarkers.Add(new MachineMarkerViewModel { X = m.Position.Y, Y = m.Position.X, Id = m.Id.ToString() });
            }
            await js.InvokeVoidAsync("MapsControl.draw", CurrentPosition.Longitude, CurrentPosition.Latitude, machineMarkers);
        }

    }
}
